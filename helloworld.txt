/******************************************************************************
*
******************************************************************************/

/*
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

/***************************** Include Files *********************************/

#include <stdio.h>
#include <stdlib.h>			/* malloc() */
#include <sleep.h>			/* for sleep */
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"	/* XPAR parameters */
#include "xspi.h"			/* SPI device driver */






/************************** Constant Definitions *****************************/
/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define SPI_DEVICE_ID		XPAR_SPI_0_DEVICE_ID

/*
 * This is the size of the buffer to be transmitted/received in start_thermo() function.
 */
#define BUFFER_SIZE	16


/************************** Variable Definitions *****************************/

/*
 * The instances to support the device drivers are global such that the
 * are initialized to zero each time the program runs.
 */
	 /* The instance of the SPI device */

/*
 * The following variables are used to read and write to the Spi device, they
 * are global to avoid having large buffers on the stack.
 */
u8 ReadBuffer[BUFFER_SIZE] = {0};
u8 WriteBuffer[BUFFER_SIZE] = {0};

XSpi* testxspi;

/************************** Functions *****************************/

int start_thermo(u16 SpiDeviceId)
{
	testxspi = malloc(sizeof(XSpi));
	
	//XSpi MAX31856_instance;
	XSpi* SpiInstancePtr = testxspi;
	
	int Status;

	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */


	/*
	 * Initialize the SPI driver so that it is ready to use.
	 */
	ConfigPtr = XSpi_LookupConfig(SpiDeviceId);
	if (ConfigPtr == NULL)
	{
		return XST_DEVICE_NOT_FOUND;
	}

	Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr,
					  ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}


	/***********************************************************************************
	 * * Set the Spi device as a master
	 **********************************************************************************/
	//Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION);
	//Status = XSpi_SetOptions(SpiInstancePtr, XSP_MANUAL_SSELECT_OPTION | XSP_CLK_PHASE_1_OPTION | );
	Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION | XSP_CLK_PHASE_1_OPTION | XSP_CLK_ACTIVE_LOW_OPTION);
	//Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION);
	/***********************************************************************************/
	/***********************************************************************************/
	if (Status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	/*
	* Start the SPI driver so that the device is enabled.
	*/
	XSpi_Start(SpiInstancePtr);

	/*
	 * Disable Global interrupt to use polled mode operation
	 */
	XSpi_IntrGlobalDisable(SpiInstancePtr);

	/*
	 * Enable Spi
	 */
	XSpi_Enable(SpiInstancePtr);

	/*
	 * ILA Vivado hardware manager
	 */
	printf("Trigger ILA core now. (10sec)\n");
	sleep_A9(10);

	// Slave select
	XSpi_SetSlaveSelect(SpiInstancePtr, 0x01);


	/***********************************************************************************
	 * Transmit the data.
	 **********************************************************************************/
	WriteBuffer[0] = 0;
	
	/* Transmit the data.(Write to MAX register) */
	XSpi_Transfer(SpiInstancePtr, WriteBuffer, ReadBuffer, BUFFER_SIZE);
	printf("Get here after XSPI_transfer?\n"); 

	printf("Readbuffer: \n");
	for (int i = 0; i < BUFFER_SIZE; i++)
	{
		printf("R[%x] = %x\n", i, ReadBuffer[i]);
	}
		
	// Deselect
	XSpi_SetSlaveSelect(SpiInstancePtr, 0x0);
	sleep_A9(1);

	// Disable device at the end
	XSpi_Disable(SpiInstancePtr);
	sleep_A9(1);

	return XST_SUCCESS;
}


/********************************* Main *******************************************/
int main()
{


    init_platform();
    printf("Program start\n");

    printf("Starting thermocouple.\n");

    int status;
    status = start_thermo(SPI_DEVICE_ID);
    if (status == XST_SUCCESS )
    {
    	printf("Success thermo done.\n");
    }

    printf("End program.");
    cleanup_platform();
    return 0;
}